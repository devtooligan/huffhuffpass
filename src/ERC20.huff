/* Imports */
#include "./utils/Ownable.huff"
#include "./utils/Address.huff"
#include "./utils/Utils.huff"
#include "./utils/HashMap.huff"

/* Interface */
#define function mint(address,uint256) nonpayable returns ()
#define function burn(address,uint256) nonpayable returns ()
#define function name() nonpayable returns (string)
#define function symbol() nonpayable returns (string)
#define function decimals() nonpayable returns (uint256)
#define function transfer(address,uint256) nonpayable returns ()
#define function transferFrom(address,address,uint256) nonpayable returns ()
#define function approve(address,uint256) nonpayable returns () // these returns sb updated

#define function balanceOf(address) view returns (uint256)
#define function allowance(address,address) view returns (uint256)
#define function totalSupply() view returns (uint256)

#define event Transfer(address,address,uint256)
#define event Approve(address,address,uint256)

/* Events Signatures */
#define constant TRANSFER_EVENT_SIGNATURE = 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF
#define constant APPROVAL_EVENT_SIGNATURE = 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925

/* Storage Slots */
#define constant BALANCE_LOCATION = FREE_STORAGE_POINTER()
#define constant ALLOWANCE_LOCATION = FREE_STORAGE_POINTER()
#define constant TOTAL_SUPPLY_LOCATION = FREE_STORAGE_POINTER()
#define constant NAME_LOCATION = FREE_STORAGE_POINTER()
#define constant SYMBOL_LOCATION = FREE_STORAGE_POINTER()

/* Constants */
#define constant META_NAME = 0x05546f6b656e                                    // "Token" // ISSUE: string converter fn
#define constant META_SYMBOL = 0x03544B4E                                      // "TKN"
#define constant META_DECIMALS = 0x12                                          // 18
// #define constant UINT_256_MAX = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff


/* Constructor */

// TODO: GAS GOLF

#define macro CONSTRUCTOR() = takes(0) returns (0) {
    // Set msg.sender as the owner of the contract.
    OWNABLE_CONSTRUCTOR()
    // Name is first
    0x20 0x40 codesize sub 0x00                                                // [mem_loc, codesize-size_of_name*2, size_of_name]
    codecopy 0x00 mload                                                        // [name]
    [NAME_LOCATION] sstore                                                     // []

    0x20 0x20 codesize sub 0x00                                                // [mem_loc, codesize-size_of_symbol, size_of_symbol]
    codecopy 0x00 mload                                                        // [symbol]
    [SYMBOL_LOCATION] sstore                                                   // []
}

/* Metadata */

#define macro NAME() = takes (0) returns (0) {
    0x20 0x20 mstore
    [META_NAME] 0x45 mstore
    0x60 0x20 return
}

#define macro SYMBOL() = takes (0) returns (0) {
    0x20 0x20 mstore
    [META_SYMBOL] 0x43 mstore
    0x60 0x20 return
}


#define macro DECIMALS() = takes (0) returns (0) {
    [META_DECIMALS] 0x00 mstore
    0x20 0x00 return
}

/* Accounting Functions */
#define macro BALANCE_OF() = takes (0) returns (0) {
    0x04 calldataload                                                          // [account]
    [BALANCE_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00)                            // [balance]
    0x00 mstore                                                                // []
    0x20 0x00 return                                                           // []
}

#define macro TOTAL_SUPPLY() = takes (0) returns (0) {
    [TOTAL_SUPPLY_LOCATION] sload                                              // [supply]
    0x00 mstore                                                                // []
    0x20 0x00 return                                                           // []
}

#define macro ALLOWANCE() = takes (0) returns (0) {
    0x24 calldataload                                                          // [to]
    0x04 calldataload                                                          // [from, to]
    LOAD_ELEMENT_FROM_KEYS(0x00)                                               // [value]

    0x00 mstore
    0x20 0x00 return
}


/* Transfer Functions */
#define macro TRANSFER_TAKE_FROM() = takes(3) returns (3) {
    // Ensure that the sender has a sufficient balance.
    // input stack: [value, from, to]
    dup2 [BALANCE_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00)                       // [balance, value, from, to]                                                // [from, value, from, to]
    dup1                                                                       // [balance, balance, value, from, to]
    dup3                                                                       // [value, balance, balance, value, from, to]
    gt                                                                         // [value>balance, balance, value, from, to]
    iszero                                                                     // [value<=balance, balance, value, from, to]
    valid jumpi                                                                // [balance, value, from, to]

    // insufficient balance
    0x00 0x00 revert

    // // Update the sender's balance.
    // input stack: [balance, value, from, to]
    valid:
    dup2                                                                       // [value, balance, value, from, to]
    swap1                                                                      // [balance, value, value, from, to]
    sub                                                                        // [balance - value, value, from, to]
    dup3                                                                       // [from, balance-value, value, from, to]
    [BALANCE_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)                           // [value, from, to]
}

#define macro TRANSFER_GIVE_TO() = takes(3) returns (0) {
    // Update the balance of the recipient.
    // input stack: [value, from, to]
    dup3                                                                       // [to, value, from, to]
    dup2                                                                       // [value, to, value, from, to]
    swap1                                                                      // [to, value, value, from, to]
    [BALANCE_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00)                            // [balance, value, value, from, to]
    add                                                                        // [balance+value, value, from, to]
    dup4                                                                       // [to, balance+value, value, from, to]
    [BALANCE_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)                           // [value, from, to]
}

#define macro APPROVE() = takes (0) returns (0) {
    0x24 calldataload                                                          // [value]
    0x04 calldataload                                                          // [to, value]
    caller                                                                     // [from, to, value]

    STORE_ELEMENT_FROM_KEYS(0x00)
    0x01 0x00 mstore // TODO: consider macro
    0x20 0x00 return
}

#define macro TRANSFER() = takes(0) returns(1) {
    // Setup the stack for the transfer function.
    0x04 calldataload                                                          // [to]
    caller                                                                     // [from, to]
    0x24 calldataload                                                          // [value, from, to]

    // Update the balances of the sender and recipient.
    TRANSFER_TAKE_FROM()                                                       // [value, from, to]
    TRANSFER_GIVE_TO()                                                         // [value, from, to]

    // Emit the transfer event. // TODO consider macro
    0x00 mstore                                                                // [from, to]
    [TRANSFER_EVENT_SIGNATURE]                                                 // [sig, from, to]
    0x20 0x00                                                                  // [0, 32, sig, from, to]
    log3                                                                       // []

    // Return "1" to represent a succesful transfer.
    0x01 0x00 mstore
    0x20 0x00 return
}

#define macro TRANSFER_FROM() = takes(0) returns(1) {
    // Setup the stack for the transfer function.
    0x24 calldataload                                                          // [to]
    0x04 calldataload                                                          // [from, to]
    caller                                                                     // [msg.sender, from, to]
    dup2                                                                       // [from, msg.sender, from, to]

    // check for max approval
    LOAD_ELEMENT_FROM_KEYS(0x00)                                               // [approved, from, to]
    dup1                                                                       // [approved, approved, from, to]
    0x44 calldataload                                                          // [value, approved, approved, from, to]
    // TODO: GOLF -- might make sense to handle non max first
    dup2                                                                       // [approved, value, approved, approved, from, to]
    [TYPE_256_MAX]                                                             // [type(uint).max, approved, value, approved, approved, from, to]
    eq                                                                         // [type(uint).max == approved, value, approved, approved, from, to]
    approved1 jumpi                                                            // [value, approved, approved, from, to]
    gt                                                                         // [value > approved, approved, from, to]
    insufficientApproval jumpi                                                 // [approved, from, to]
    0x44 calldataload                                                          // [value, approved, from, to]
    swap1                                                                      // [approved, value, from, to]
    sub                                                                        // [approved - value = newApprovalValue, from, to]
    dup3                                                                       // [to, newApprovalValue, from, to]
    dup3                                                                       // [from, to, newApprovalValue, from, to]
    STORE_ELEMENT_FROM_KEYS(0x00)                                              // [from, to]
    approved2 jump                                                             // [from, to]

    approved1:                                                                 // [value, approved, approved, from, to]
    pop pop pop                                                                // [from, to]

    approved2:                                                                 // [from, to]
    0x44 calldataload                                                          // [value, from, to]

    // Update the balances of the sender and recipient.
    TRANSFER_TAKE_FROM()                                                       // [value, from, to]
    TRANSFER_GIVE_TO()                                                         // [value, from, to]

    // Emit the transfer event. // TODO consider macro
    0x00 mstore                                                                // [from, to]
    [TRANSFER_EVENT_SIGNATURE]                                                 // [sig, from, to]
    0x20 0x00                                                                  // [0, 32, sig, from, to]
    log3                                                                       // []

    // Return "1" to represent a succesful transfer.
    0x01 0x00 mstore
    0x20 0x00 return

    insufficientApproval:
        0x00 0x00 revert
}

/* Permissioned Functions */

#define macro BURN() = takes(0) returns (0) {
    // Setup the stack for the burn function.
    0x00                                                                       // [to (0x00)]
    0x04 calldataload                                                          // [from, to]
    0x24 calldataload                                                          // [value, from, to]
    TRANSFER_TAKE_FROM()                                                       // [value, from, to]

    dup1                                                                       // [value, value, from, to]
    [TOTAL_SUPPLY_LOCATION] sload                                              // [supply,value,value,from,to]
    sub                                                                        // [supply-value,value,from,to]
    [TOTAL_SUPPLY_LOCATION] sstore                                             // [value,from,to]

    // Emit the transfer event.
    0x00 mstore                                                                // [from, to]
    [TRANSFER_EVENT_SIGNATURE]                                                 // [sig, from, to]
    0x20 0x00                                                                  // [0, 32, sig, from, to]
    log3                                                                       // []

    0x00 0x00 return
}


#define macro MINT() = takes(0) returns (0) {
    // Ensure that the sender is the owner of the contract.
    // ONLY_OWNER()

    // Setup the stack for the mint function.
    0x04 calldataload                                                          // [to]
    0x00                                                                       // [from (0x00), to]
    0x24 calldataload                                                          // [value, from, to]

    // Give tokens to the recipient.
    TRANSFER_GIVE_TO()                                                         // [value, from, to]

    // Update totalSupply
    dup1                                                                       // [value, value, from, to]
    [TOTAL_SUPPLY_LOCATION] sload                                              // [supply,value,value,from,to]
    add                                                                        // [supply+value,value,from,to]
    [TOTAL_SUPPLY_LOCATION] sstore                                             // [value,from,to]


    // Emit the transfer event.
    0x00 mstore                 // [from, to]
    [TRANSFER_EVENT_SIGNATURE]  // [sig, from, to]
    0x20 0x00                   // [0, 32, sig, from, to]
    log3                        // []

    0x00 0x00 return
}

// Main Macro
#define macro MAIN() = takes(0) returns (0) {

    // Identify which function is being called.
    0x00 calldataload 0xE0 shr                                                 // [fn sig]
    dup1 __FUNC_SIG(transfer)       eq transferJump     jumpi
    // dup1 __FUNC_SIG(transferFrom)   eq transferFromJump jumpi
    dup1 __FUNC_SIG(mint)           eq mintJump         jumpi
    dup1 __FUNC_SIG(balanceOf)      eq balanceOfJump    jumpi
    dup1 __FUNC_SIG(burn)           eq burnJump         jumpi
    dup1 __FUNC_SIG(balanceOf)      eq balanceOfJump    jumpi
    dup1 __FUNC_SIG(totalSupply)    eq totalSupplyJump  jumpi
    dup1 __FUNC_SIG(approve)        eq approveJump      jumpi
    dup1 __FUNC_SIG(allowance)      eq allowanceJump    jumpi
    dup1 __FUNC_SIG(name)           eq nameJump         jumpi
    dup1 __FUNC_SIG(symbol)         eq symbolJump       jumpi
    dup1 __FUNC_SIG(decimals)       eq decimalsJump       jumpi

    // ADD EXTERNAL MAIN'S

    0x00 0x00 revert

    nameJump:
        NAME()
    symbolJump:
        SYMBOL()
    decimalsJump:
        DECIMALS()
    transferJump:
        TRANSFER()
    // transferFromJump:
    //     TRANSFER_FROM()
    mintJump:
        MINT()
    burnJump:
        BURN()
    balanceOfJump:
        BALANCE_OF()
    totalSupplyJump:
        TOTAL_SUPPLY()
    approveJump:
        APPROVE()
    allowanceJump:
        ALLOWANCE()

}